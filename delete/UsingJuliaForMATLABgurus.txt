%Using Julia for MATLAB gurus

#Install Julia, PyPlot, PyCall, Python and Madplotlib

#if ~ is you home dir
#Create folder
#"~.julia\\MyPackage\\src
#Put func inside called MyModule.jl (as an example) with the following lines
##module MyModule
##include("FuncName.jl")
##end
#Where FuncName is the func you will call in your scripts. 

## New bit: ALL of this now in: "C:\Users\timmm\.julia\config"
#Starting a new sesh (speeds stuff up)
]
precompile
#Start Revise module
using Revise
#Call 
push!(LOAD_PATH, "C:\\Users\\tim_davis\\.julia\\MyPackage\\src")
#then in there have your package i.e. "TestPackage.jl"
#Call
using MyModule
#Go to dir
cd("C:\\Users\\tim_davis\\Desktop\\JuliaTest")
#Call script
include("RunScript.jl")

include(raw"C:\Users\timmm\.julia\packages\MyModule\.....")

using Coverage
analyze_malloc("C:\\Users\\tim_davis\\Desktop\\JuliaTest") 

#In Enviroment var
Name:JULIA_NUM_THREADS
Value:'how many you have'
Threads.nthreads() #- reports number you have
in loop add - 


replace all % for #
use repeat not repmat
strings use "" not ''
remove all clear statements (julia doest use them). simply null excess vars in func
remove 1.* etc, if using integer just * not .*
remove all multiline statements  (with .../r). Or just remove "..." as this works anyway
replace logical statements like A>0 with A.>0 if its matrix
make sure all function names at top of FILE are different!!!! How its saved is useless (file name)
find is findall https://github.com/JuliaLang/julia/issues/10593
#if G is a bool
.!G #is the inverse, need the .
#. also needed for log, acos and a few others. 
make sure multilines the + - * etc are on the right hand side of the upper line. 
nanmax --->  Xmx=maximum(filter(!isnan, X));
Dont just say a=b...
a=[1, 2, 3, 4, 5]; b=a; !pop(b); a=[1, 2, 3, 4]; use b=copy(a)

bsxfun = loop
Tn = (bsxfun(@times,Tx,CosAx))+(bsxfun(@times,Ty,CosAy));
Ts = (bsxfun(@times,-Tx,CosAy))+(bsxfun(@times,Ty,CosAx));
To:
Tn=zeros(size(Tx))
Ts=zeros(size(Tx))
for i=1:length(Tx)
    Tn[i,:]=( Tx[i,:].*CosAx[i])+(Ty[i,:].*CosAy[i]);
    Ts[i,:]=(-Tx[i,:].*CosAy[i])+(Ty[i,:].*CosAx[i]);
end

diag (from vector µ):
dµ = diagm(0 => µ);
#Identity matrix of size n
ID = Matrix{Float64}(I,n,n)

#nan (Creating matrix of NaNs)
FeLe=Array{Float64,2}(undef, n,1);FeLe=fill!(FeLe, NaN)

#Like using MATLABS interp1
x=(2:1:50)
y=x.^2
y5=finterp1(x,y,5)
ans=25
to:
using Interpolations
x=(1:1:50) #MUST BE UNIFORMLY SPACED 1:n
y=x.^2
itp = interpolate(y, BSpline(Linear()))
ax=itp(5)
#If you dont start from 1 i.e.
start=4;
x=(start:1:50) #MUST BE UNIFORMLY SPACED 1:n
y=x.^2
itp = interpolate(y, BSpline(Linear()))
ax=itp(5+(1-start))
ans=25


Checking alloctions:
XX=@allocated MyFunc()
println(XX)

